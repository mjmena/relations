import React, { Fragment } from 'react';
import { Editor, EditorState, convertToRaw, convertFromRaw, CompositeDecorator } from 'draft-js';
import { getDefaultKeyBinding } from 'draft-js';

import decorators from './../plugins/decorators';

export default class SummaryEditor extends React.Component {
  constructor(props) {
    super(props);
    let editorState = this.props.summary ? EditorState.createWithContent(convertFromRaw(JSON.parse(this.props.summary))) : EditorState.createEmpty();

    this.state = {
      mentioning: false,
      editorState: EditorState.set(editorState, { decorator: new CompositeDecorator(decorators) })
    };
    this.onChange = (editorState) => this.setState({ editorState });
  }

  handleBlur = (event) => {
    this.props.handleSubmit(JSON.stringify(convertToRaw(this.state.editorState.getCurrentContent())))
  }

  mention = (event) => {
    //2 or @ with shift modifier
    if (event.shiftKey && event.keycode === 50) {
      this.setState({ mentioning: true })
    }
    //enter
    if (event.keycode === 13 && this.state.mentioning) {
      event.preventDefault()
      this.setState({ mentioning: false })
    }
    return getDefaultKeyBinding(event);
  }

  render() {
    return <Fragment>
      <Editor editorState={this.state.editorState} onChange={this.onChange} onBlur={this.handleBlur} />
    </Fragment>
  }
}
